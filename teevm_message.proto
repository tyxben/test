syntax = "proto3";

package teevm;

option go_package = "chainmaker.org/chainmaker/vm-tee-go/vm_mgr/pb/protogo";

service TeeVMRpc {
    rpc TeeVMCommunicate(stream TeeVMMessage) returns(stream TeeVMMessage) {};
}

//TeeVMMessage means message between chainmaker and Tee vm
message TeeVMMessage {

    string tx_id = 1;

    TeeVMType type = 2;

    // cross contract not support in tee 
    CrossContext cross_context = 3;

    // if not used, set to nil
    SysCallMessage sys_call_message = 4;

    // if not used, set to nil
    TxRequest request = 5;

    // if not used, set to nil
    TxResponse response = 6;
    
    string chain_id = 7;
    
    bytes  sign = 8;
}

message SysCallMessage {

    TeeVMCode code = 1;

    string message = 2;

    // if not used, set to nil
    map<string, bytes> payload = 3;
}

message CrossContext {

    uint32 current_depth = 1;

    string process_name = 2;

    /*
     63          59           43                   0
      +----------+^-----------+-^---------+-^-------
      |   4bits   |   16bits    |   .....   | 4bits|
      +----------+^-----------+-^---------+-^-------
     depth_count | history_flag | vec<runtime_type>
     the length of vec is controlled by depth_count
    */
    uint64 cross_info = 3;
}

enum TeeVMType {

    UNDEFINED = 0;

    REGISTER = 1;

    REGISTERED = 2;

    PREPARE = 3;

    READY = 4;

    INIT = 5;

    INVOKE = 6;

    TX_REQUEST = 7;

    TX_RESPONSE = 8;

    GET_STATE_REQUEST = 9;

    GET_STATE_RESPONSE = 10;

    GET_BYTECODE_REQUEST = 11;

    GET_BYTECODE_RESPONSE = 12;

    CALL_CONTRACT_REQUEST = 13;

    CALL_CONTRACT_RESPONSE = 14;

    COMPLETED = 15;

    ERROR = 16;

    CREATE_KV_ITERATOR_REQUEST = 17;

    CREATE_KV_ITERATOR_RESPONSE = 18;

    CONSUME_KV_ITERATOR_REQUEST = 19;

    CONSUME_KV_ITERATOR_RESPONSE = 20;

    CREATE_KEY_HISTORY_ITER_REQUEST = 21;

    CREATE_KEY_HISTORY_TER_RESPONSE = 22;

    CONSUME_KEY_HISTORY_ITER_REQUEST = 23;

    CONSUME_KEY_HISTORY_ITER_RESPONSE = 24;

    GET_SENDER_ADDRESS_REQUEST = 25;

    GET_SENDER_ADDRESS_RESPONSE = 26;
}

// TX_REQUEST
message TxRequest {

    string contract_name = 1;

    string contract_version = 2;

    string method = 3;

    map<string, bytes> parameters = 4;

    // cross contract in use if not use set to Nil
    TxContext tx_context = 5;

    // gas calue in tee env
    uint64 gas_used = 6;

}

message TxContext {
    map<string, bytes> write_map = 1;

    map<string, bytes> read_map = 2;
}

// TX_RESPONSE
message TxResponse {

    string tx_id = 1;

    TeeVMCode code = 2;

    bytes result = 3;

    string message = 4;

    map<string, bytes> write_map = 5;

    map<string, bytes> read_map = 6;

    repeated TeeContractEvent events = 7;

    string contract_name = 8;

    string contract_version = 9;

    string chain_id = 10;

    uint64 gas_used = 11;
}

message TeeContractEvent {
    // Event topic
    string topic = 1;
    // Event contract name
    string contract_name = 2;
    // Event payload
    repeated string data = 3;
}


enum TeeVMCode {
    OK = 0;
    FAIL = 1;
}


// --------------------  request message ---------------------
message CallContractRequest {
    string contract_name = 1;
    // args
    map<string, bytes> args = 2;
}

// --------------------  result message ---------------------

// user method response
message Response {
    // A status code that should follow the HTTP status codes.
    int32 status = 1;

    // A message associated with the response code. error has message
    string message = 2;

    // A payload that can be used to include metadata with this response. success with payload
    bytes payload = 3;
}

// real user contract response
message ContractResponse {

    // always has response
    Response response = 1;

    // always has write map
    map<string, bytes> write_map = 2;

    // only cross contracts has read map
    map<string, bytes> read_map = 3;

    // always has events
    repeated TeeContractEvent events = 4;
}

// message Event {
//     // Event topic
//     string topic = 1;
//     // Event contract name
//     string contract_name = 2;
//     // Event payload
//     repeated string data = 3;
// }