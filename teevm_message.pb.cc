// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: teevm_message.proto

#include "teevm_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace teevm {
PROTOBUF_CONSTEXPR TeeVMMessage::TeeVMMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tx_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chain_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cross_context_)*/nullptr
  , /*decltype(_impl_.sys_call_message_)*/nullptr
  , /*decltype(_impl_.request_)*/nullptr
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeeVMMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeeVMMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeeVMMessageDefaultTypeInternal() {}
  union {
    TeeVMMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeeVMMessageDefaultTypeInternal _TeeVMMessage_default_instance_;
PROTOBUF_CONSTEXPR SysCallMessage_PayloadEntry_DoNotUse::SysCallMessage_PayloadEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct SysCallMessage_PayloadEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysCallMessage_PayloadEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysCallMessage_PayloadEntry_DoNotUseDefaultTypeInternal() {}
  union {
    SysCallMessage_PayloadEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysCallMessage_PayloadEntry_DoNotUseDefaultTypeInternal _SysCallMessage_PayloadEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR SysCallMessage::SysCallMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SysCallMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SysCallMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SysCallMessageDefaultTypeInternal() {}
  union {
    SysCallMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SysCallMessageDefaultTypeInternal _SysCallMessage_default_instance_;
PROTOBUF_CONSTEXPR CrossContext::CrossContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.process_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cross_info_)*/uint64_t{0u}
  , /*decltype(_impl_.current_depth_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrossContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossContextDefaultTypeInternal() {}
  union {
    CrossContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossContextDefaultTypeInternal _CrossContext_default_instance_;
PROTOBUF_CONSTEXPR TxRequest_ParametersEntry_DoNotUse::TxRequest_ParametersEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TxRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxRequest_ParametersEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxRequest_ParametersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TxRequest_ParametersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxRequest_ParametersEntry_DoNotUseDefaultTypeInternal _TxRequest_ParametersEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TxRequest::TxRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.parameters_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.contract_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contract_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.method_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tx_context_)*/nullptr
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxRequestDefaultTypeInternal() {}
  union {
    TxRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxRequestDefaultTypeInternal _TxRequest_default_instance_;
PROTOBUF_CONSTEXPR TxContext_WriteMapEntry_DoNotUse::TxContext_WriteMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TxContext_WriteMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxContext_WriteMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxContext_WriteMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TxContext_WriteMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxContext_WriteMapEntry_DoNotUseDefaultTypeInternal _TxContext_WriteMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TxContext_ReadMapEntry_DoNotUse::TxContext_ReadMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TxContext_ReadMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxContext_ReadMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxContext_ReadMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TxContext_ReadMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxContext_ReadMapEntry_DoNotUseDefaultTypeInternal _TxContext_ReadMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TxContext::TxContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.write_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.read_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxContextDefaultTypeInternal() {}
  union {
    TxContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxContextDefaultTypeInternal _TxContext_default_instance_;
PROTOBUF_CONSTEXPR TxResponse_WriteMapEntry_DoNotUse::TxResponse_WriteMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TxResponse_WriteMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxResponse_WriteMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxResponse_WriteMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TxResponse_WriteMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxResponse_WriteMapEntry_DoNotUseDefaultTypeInternal _TxResponse_WriteMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TxResponse_ReadMapEntry_DoNotUse::TxResponse_ReadMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct TxResponse_ReadMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxResponse_ReadMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxResponse_ReadMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TxResponse_ReadMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxResponse_ReadMapEntry_DoNotUseDefaultTypeInternal _TxResponse_ReadMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR TxResponse::TxResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.write_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.read_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.tx_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.result_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contract_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contract_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chain_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.gas_used_)*/uint64_t{0u}
  , /*decltype(_impl_.code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TxResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TxResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TxResponseDefaultTypeInternal() {}
  union {
    TxResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TxResponseDefaultTypeInternal _TxResponse_default_instance_;
PROTOBUF_CONSTEXPR TeeContractEvent::TeeContractEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_.topic_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.contract_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TeeContractEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeeContractEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeeContractEventDefaultTypeInternal() {}
  union {
    TeeContractEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeeContractEventDefaultTypeInternal _TeeContractEvent_default_instance_;
PROTOBUF_CONSTEXPR CallContractRequest_ArgsEntry_DoNotUse::CallContractRequest_ArgsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CallContractRequest_ArgsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallContractRequest_ArgsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallContractRequest_ArgsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CallContractRequest_ArgsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallContractRequest_ArgsEntry_DoNotUseDefaultTypeInternal _CallContractRequest_ArgsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CallContractRequest::CallContractRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.contract_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CallContractRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallContractRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallContractRequestDefaultTypeInternal() {}
  union {
    CallContractRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallContractRequestDefaultTypeInternal _CallContractRequest_default_instance_;
PROTOBUF_CONSTEXPR Response::Response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.payload_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseDefaultTypeInternal() {}
  union {
    Response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseDefaultTypeInternal _Response_default_instance_;
PROTOBUF_CONSTEXPR ContractResponse_WriteMapEntry_DoNotUse::ContractResponse_WriteMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ContractResponse_WriteMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractResponse_WriteMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractResponse_WriteMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ContractResponse_WriteMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractResponse_WriteMapEntry_DoNotUseDefaultTypeInternal _ContractResponse_WriteMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ContractResponse_ReadMapEntry_DoNotUse::ContractResponse_ReadMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ContractResponse_ReadMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractResponse_ReadMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractResponse_ReadMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ContractResponse_ReadMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractResponse_ReadMapEntry_DoNotUseDefaultTypeInternal _ContractResponse_ReadMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ContractResponse::ContractResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.write_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.read_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.response_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContractResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContractResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContractResponseDefaultTypeInternal() {}
  union {
    ContractResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContractResponseDefaultTypeInternal _ContractResponse_default_instance_;
}  // namespace teevm
static ::_pb::Metadata file_level_metadata_teevm_5fmessage_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_teevm_5fmessage_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_teevm_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_teevm_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.cross_context_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.sys_call_message_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.request_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeVMMessage, _impl_.sign_),
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage_PayloadEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage_PayloadEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage_PayloadEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage_PayloadEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::teevm::SysCallMessage, _impl_.payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::CrossContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::CrossContext, _impl_.current_depth_),
  PROTOBUF_FIELD_OFFSET(::teevm::CrossContext, _impl_.process_name_),
  PROTOBUF_FIELD_OFFSET(::teevm::CrossContext, _impl_.cross_info_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest, _impl_.contract_name_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest, _impl_.contract_version_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest, _impl_.method_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest, _impl_.parameters_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest, _impl_.tx_context_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxRequest, _impl_.gas_used_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_WriteMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_WriteMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_WriteMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_WriteMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_ReadMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_ReadMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_ReadMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext_ReadMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext, _impl_.write_map_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxContext, _impl_.read_map_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_WriteMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_WriteMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_WriteMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_WriteMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_ReadMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_ReadMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_ReadMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse_ReadMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.tx_id_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.write_map_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.read_map_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.events_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.contract_name_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.contract_version_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.chain_id_),
  PROTOBUF_FIELD_OFFSET(::teevm::TxResponse, _impl_.gas_used_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::TeeContractEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::TeeContractEvent, _impl_.topic_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeContractEvent, _impl_.contract_name_),
  PROTOBUF_FIELD_OFFSET(::teevm::TeeContractEvent, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::teevm::CallContractRequest_ArgsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::CallContractRequest_ArgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::CallContractRequest_ArgsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::CallContractRequest_ArgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::CallContractRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::CallContractRequest, _impl_.contract_name_),
  PROTOBUF_FIELD_OFFSET(::teevm::CallContractRequest, _impl_.args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::Response, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::teevm::Response, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::teevm::Response, _impl_.payload_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_WriteMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_WriteMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_WriteMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_WriteMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_ReadMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_ReadMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_ReadMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse_ReadMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse, _impl_.response_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse, _impl_.write_map_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse, _impl_.read_map_),
  PROTOBUF_FIELD_OFFSET(::teevm::ContractResponse, _impl_.events_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::teevm::TeeVMMessage)},
  { 14, 22, -1, sizeof(::teevm::SysCallMessage_PayloadEntry_DoNotUse)},
  { 24, -1, -1, sizeof(::teevm::SysCallMessage)},
  { 33, -1, -1, sizeof(::teevm::CrossContext)},
  { 42, 50, -1, sizeof(::teevm::TxRequest_ParametersEntry_DoNotUse)},
  { 52, -1, -1, sizeof(::teevm::TxRequest)},
  { 64, 72, -1, sizeof(::teevm::TxContext_WriteMapEntry_DoNotUse)},
  { 74, 82, -1, sizeof(::teevm::TxContext_ReadMapEntry_DoNotUse)},
  { 84, -1, -1, sizeof(::teevm::TxContext)},
  { 92, 100, -1, sizeof(::teevm::TxResponse_WriteMapEntry_DoNotUse)},
  { 102, 110, -1, sizeof(::teevm::TxResponse_ReadMapEntry_DoNotUse)},
  { 112, -1, -1, sizeof(::teevm::TxResponse)},
  { 129, -1, -1, sizeof(::teevm::TeeContractEvent)},
  { 138, 146, -1, sizeof(::teevm::CallContractRequest_ArgsEntry_DoNotUse)},
  { 148, -1, -1, sizeof(::teevm::CallContractRequest)},
  { 156, -1, -1, sizeof(::teevm::Response)},
  { 165, 173, -1, sizeof(::teevm::ContractResponse_WriteMapEntry_DoNotUse)},
  { 175, 183, -1, sizeof(::teevm::ContractResponse_ReadMapEntry_DoNotUse)},
  { 185, -1, -1, sizeof(::teevm::ContractResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::teevm::_TeeVMMessage_default_instance_._instance,
  &::teevm::_SysCallMessage_PayloadEntry_DoNotUse_default_instance_._instance,
  &::teevm::_SysCallMessage_default_instance_._instance,
  &::teevm::_CrossContext_default_instance_._instance,
  &::teevm::_TxRequest_ParametersEntry_DoNotUse_default_instance_._instance,
  &::teevm::_TxRequest_default_instance_._instance,
  &::teevm::_TxContext_WriteMapEntry_DoNotUse_default_instance_._instance,
  &::teevm::_TxContext_ReadMapEntry_DoNotUse_default_instance_._instance,
  &::teevm::_TxContext_default_instance_._instance,
  &::teevm::_TxResponse_WriteMapEntry_DoNotUse_default_instance_._instance,
  &::teevm::_TxResponse_ReadMapEntry_DoNotUse_default_instance_._instance,
  &::teevm::_TxResponse_default_instance_._instance,
  &::teevm::_TeeContractEvent_default_instance_._instance,
  &::teevm::_CallContractRequest_ArgsEntry_DoNotUse_default_instance_._instance,
  &::teevm::_CallContractRequest_default_instance_._instance,
  &::teevm::_Response_default_instance_._instance,
  &::teevm::_ContractResponse_WriteMapEntry_DoNotUse_default_instance_._instance,
  &::teevm::_ContractResponse_ReadMapEntry_DoNotUse_default_instance_._instance,
  &::teevm::_ContractResponse_default_instance_._instance,
};

const char descriptor_table_protodef_teevm_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023teevm_message.proto\022\005teevm\"\202\002\n\014TeeVMMe"
  "ssage\022\r\n\005tx_id\030\001 \001(\t\022\036\n\004type\030\002 \001(\0162\020.tee"
  "vm.TeeVMType\022*\n\rcross_context\030\003 \001(\0132\023.te"
  "evm.CrossContext\022/\n\020sys_call_message\030\004 \001"
  "(\0132\025.teevm.SysCallMessage\022!\n\007request\030\005 \001"
  "(\0132\020.teevm.TxRequest\022#\n\010response\030\006 \001(\0132\021"
  ".teevm.TxResponse\022\020\n\010chain_id\030\007 \001(\t\022\014\n\004s"
  "ign\030\010 \001(\014\"\246\001\n\016SysCallMessage\022\036\n\004code\030\001 \001"
  "(\0162\020.teevm.TeeVMCode\022\017\n\007message\030\002 \001(\t\0223\n"
  "\007payload\030\003 \003(\0132\".teevm.SysCallMessage.Pa"
  "yloadEntry\032.\n\014PayloadEntry\022\013\n\003key\030\001 \001(\t\022"
  "\r\n\005value\030\002 \001(\014:\0028\001\"O\n\014CrossContext\022\025\n\rcu"
  "rrent_depth\030\001 \001(\r\022\024\n\014process_name\030\002 \001(\t\022"
  "\022\n\ncross_info\030\003 \001(\004\"\355\001\n\tTxRequest\022\025\n\rcon"
  "tract_name\030\001 \001(\t\022\030\n\020contract_version\030\002 \001"
  "(\t\022\016\n\006method\030\003 \001(\t\0224\n\nparameters\030\004 \003(\0132 "
  ".teevm.TxRequest.ParametersEntry\022$\n\ntx_c"
  "ontext\030\005 \001(\0132\020.teevm.TxContext\022\020\n\010gas_us"
  "ed\030\006 \001(\004\0321\n\017ParametersEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\014:\0028\001\"\320\001\n\tTxContext\0221\n\twri"
  "te_map\030\001 \003(\0132\036.teevm.TxContext.WriteMapE"
  "ntry\022/\n\010read_map\030\002 \003(\0132\035.teevm.TxContext"
  ".ReadMapEntry\032/\n\rWriteMapEntry\022\013\n\003key\030\001 "
  "\001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\032.\n\014ReadMapEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"\241\003\n\nTxRes"
  "ponse\022\r\n\005tx_id\030\001 \001(\t\022\036\n\004code\030\002 \001(\0162\020.tee"
  "vm.TeeVMCode\022\016\n\006result\030\003 \001(\014\022\017\n\007message\030"
  "\004 \001(\t\0222\n\twrite_map\030\005 \003(\0132\037.teevm.TxRespo"
  "nse.WriteMapEntry\0220\n\010read_map\030\006 \003(\0132\036.te"
  "evm.TxResponse.ReadMapEntry\022\'\n\006events\030\007 "
  "\003(\0132\027.teevm.TeeContractEvent\022\025\n\rcontract"
  "_name\030\010 \001(\t\022\030\n\020contract_version\030\t \001(\t\022\020\n"
  "\010chain_id\030\n \001(\t\022\020\n\010gas_used\030\013 \001(\004\032/\n\rWri"
  "teMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\002"
  "8\001\032.\n\014ReadMapEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\014:\0028\001\"F\n\020TeeContractEvent\022\r\n\005topic\030"
  "\001 \001(\t\022\025\n\rcontract_name\030\002 \001(\t\022\014\n\004data\030\003 \003"
  "(\t\"\215\001\n\023CallContractRequest\022\025\n\rcontract_n"
  "ame\030\001 \001(\t\0222\n\004args\030\002 \003(\0132$.teevm.CallCont"
  "ractRequest.ArgsEntry\032+\n\tArgsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\"<\n\010Response\022\016"
  "\n\006status\030\001 \001(\005\022\017\n\007message\030\002 \001(\t\022\017\n\007paylo"
  "ad\030\003 \001(\014\"\261\002\n\020ContractResponse\022!\n\010respons"
  "e\030\001 \001(\0132\017.teevm.Response\0228\n\twrite_map\030\002 "
  "\003(\0132%.teevm.ContractResponse.WriteMapEnt"
  "ry\0226\n\010read_map\030\003 \003(\0132$.teevm.ContractRes"
  "ponse.ReadMapEntry\022\'\n\006events\030\004 \003(\0132\027.tee"
  "vm.TeeContractEvent\032/\n\rWriteMapEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001\032.\n\014ReadMapE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014:\0028\001*\230\005\n"
  "\tTeeVMType\022\r\n\tUNDEFINED\020\000\022\014\n\010REGISTER\020\001\022"
  "\016\n\nREGISTERED\020\002\022\013\n\007PREPARE\020\003\022\t\n\005READY\020\004\022"
  "\010\n\004INIT\020\005\022\n\n\006INVOKE\020\006\022\016\n\nTX_REQUEST\020\007\022\017\n"
  "\013TX_RESPONSE\020\010\022\025\n\021GET_STATE_REQUEST\020\t\022\026\n"
  "\022GET_STATE_RESPONSE\020\n\022\030\n\024GET_BYTECODE_RE"
  "QUEST\020\013\022\031\n\025GET_BYTECODE_RESPONSE\020\014\022\031\n\025CA"
  "LL_CONTRACT_REQUEST\020\r\022\032\n\026CALL_CONTRACT_R"
  "ESPONSE\020\016\022\r\n\tCOMPLETED\020\017\022\t\n\005ERROR\020\020\022\036\n\032C"
  "REATE_KV_ITERATOR_REQUEST\020\021\022\037\n\033CREATE_KV"
  "_ITERATOR_RESPONSE\020\022\022\037\n\033CONSUME_KV_ITERA"
  "TOR_REQUEST\020\023\022 \n\034CONSUME_KV_ITERATOR_RES"
  "PONSE\020\024\022#\n\037CREATE_KEY_HISTORY_ITER_REQUE"
  "ST\020\025\022#\n\037CREATE_KEY_HISTORY_TER_RESPONSE\020"
  "\026\022$\n CONSUME_KEY_HISTORY_ITER_REQUEST\020\027\022"
  "%\n!CONSUME_KEY_HISTORY_ITER_RESPONSE\020\030\022\036"
  "\n\032GET_SENDER_ADDRESS_REQUEST\020\031\022\037\n\033GET_SE"
  "NDER_ADDRESS_RESPONSE\020\032*\035\n\tTeeVMCode\022\006\n\002"
  "OK\020\000\022\010\n\004FAIL\020\0012N\n\010TeeVMRpc\022B\n\020TeeVMCommu"
  "nicate\022\023.teevm.TeeVMMessage\032\023.teevm.TeeV"
  "MMessage\"\000(\0010\001B7Z5chainmaker.org/chainma"
  "ker/vm-tee-go/vm_mgr/pb/protogob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_teevm_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_teevm_5fmessage_2eproto = {
    false, false, 2839, descriptor_table_protodef_teevm_5fmessage_2eproto,
    "teevm_message.proto",
    &descriptor_table_teevm_5fmessage_2eproto_once, nullptr, 0, 19,
    schemas, file_default_instances, TableStruct_teevm_5fmessage_2eproto::offsets,
    file_level_metadata_teevm_5fmessage_2eproto, file_level_enum_descriptors_teevm_5fmessage_2eproto,
    file_level_service_descriptors_teevm_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_teevm_5fmessage_2eproto_getter() {
  return &descriptor_table_teevm_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_teevm_5fmessage_2eproto(&descriptor_table_teevm_5fmessage_2eproto);
namespace teevm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeeVMType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_teevm_5fmessage_2eproto);
  return file_level_enum_descriptors_teevm_5fmessage_2eproto[0];
}
bool TeeVMType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeeVMCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_teevm_5fmessage_2eproto);
  return file_level_enum_descriptors_teevm_5fmessage_2eproto[1];
}
bool TeeVMCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TeeVMMessage::_Internal {
 public:
  static const ::teevm::CrossContext& cross_context(const TeeVMMessage* msg);
  static const ::teevm::SysCallMessage& sys_call_message(const TeeVMMessage* msg);
  static const ::teevm::TxRequest& request(const TeeVMMessage* msg);
  static const ::teevm::TxResponse& response(const TeeVMMessage* msg);
};

const ::teevm::CrossContext&
TeeVMMessage::_Internal::cross_context(const TeeVMMessage* msg) {
  return *msg->_impl_.cross_context_;
}
const ::teevm::SysCallMessage&
TeeVMMessage::_Internal::sys_call_message(const TeeVMMessage* msg) {
  return *msg->_impl_.sys_call_message_;
}
const ::teevm::TxRequest&
TeeVMMessage::_Internal::request(const TeeVMMessage* msg) {
  return *msg->_impl_.request_;
}
const ::teevm::TxResponse&
TeeVMMessage::_Internal::response(const TeeVMMessage* msg) {
  return *msg->_impl_.response_;
}
TeeVMMessage::TeeVMMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:teevm.TeeVMMessage)
}
TeeVMMessage::TeeVMMessage(const TeeVMMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeeVMMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.cross_context_){nullptr}
    , decltype(_impl_.sys_call_message_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tx_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_id().empty()) {
    _this->_impl_.tx_id_.Set(from._internal_tx_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cross_context()) {
    _this->_impl_.cross_context_ = new ::teevm::CrossContext(*from._impl_.cross_context_);
  }
  if (from._internal_has_sys_call_message()) {
    _this->_impl_.sys_call_message_ = new ::teevm::SysCallMessage(*from._impl_.sys_call_message_);
  }
  if (from._internal_has_request()) {
    _this->_impl_.request_ = new ::teevm::TxRequest(*from._impl_.request_);
  }
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::teevm::TxResponse(*from._impl_.response_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:teevm.TeeVMMessage)
}

inline void TeeVMMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tx_id_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.sign_){}
    , decltype(_impl_.cross_context_){nullptr}
    , decltype(_impl_.sys_call_message_){nullptr}
    , decltype(_impl_.request_){nullptr}
    , decltype(_impl_.response_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeeVMMessage::~TeeVMMessage() {
  // @@protoc_insertion_point(destructor:teevm.TeeVMMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeeVMMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tx_id_.Destroy();
  _impl_.chain_id_.Destroy();
  _impl_.sign_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cross_context_;
  if (this != internal_default_instance()) delete _impl_.sys_call_message_;
  if (this != internal_default_instance()) delete _impl_.request_;
  if (this != internal_default_instance()) delete _impl_.response_;
}

void TeeVMMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeeVMMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.TeeVMMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tx_id_.ClearToEmpty();
  _impl_.chain_id_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.cross_context_ != nullptr) {
    delete _impl_.cross_context_;
  }
  _impl_.cross_context_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.sys_call_message_ != nullptr) {
    delete _impl_.sys_call_message_;
  }
  _impl_.sys_call_message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeeVMMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TeeVMMessage.tx_id"));
        } else
          goto handle_unusual;
        continue;
      // .teevm.TeeVMType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::teevm::TeeVMType>(val));
        } else
          goto handle_unusual;
        continue;
      // .teevm.CrossContext cross_context = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cross_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .teevm.SysCallMessage sys_call_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sys_call_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .teevm.TxRequest request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .teevm.TxResponse response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TeeVMMessage.chain_id"));
        } else
          goto handle_unusual;
        continue;
      // bytes sign = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeeVMMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.TeeVMMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_id = 1;
  if (!this->_internal_tx_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_id().data(), static_cast<int>(this->_internal_tx_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TeeVMMessage.tx_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_id(), target);
  }

  // .teevm.TeeVMType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // .teevm.CrossContext cross_context = 3;
  if (this->_internal_has_cross_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cross_context(this),
        _Internal::cross_context(this).GetCachedSize(), target, stream);
  }

  // .teevm.SysCallMessage sys_call_message = 4;
  if (this->_internal_has_sys_call_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::sys_call_message(this),
        _Internal::sys_call_message(this).GetCachedSize(), target, stream);
  }

  // .teevm.TxRequest request = 5;
  if (this->_internal_has_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::request(this),
        _Internal::request(this).GetCachedSize(), target, stream);
  }

  // .teevm.TxResponse response = 6;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // string chain_id = 7;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TeeVMMessage.chain_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_chain_id(), target);
  }

  // bytes sign = 8;
  if (!this->_internal_sign().empty()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.TeeVMMessage)
  return target;
}

size_t TeeVMMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.TeeVMMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tx_id = 1;
  if (!this->_internal_tx_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_id());
  }

  // string chain_id = 7;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // bytes sign = 8;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sign());
  }

  // .teevm.CrossContext cross_context = 3;
  if (this->_internal_has_cross_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cross_context_);
  }

  // .teevm.SysCallMessage sys_call_message = 4;
  if (this->_internal_has_sys_call_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sys_call_message_);
  }

  // .teevm.TxRequest request = 5;
  if (this->_internal_has_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.request_);
  }

  // .teevm.TxResponse response = 6;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  // .teevm.TeeVMType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeeVMMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeeVMMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeeVMMessage::GetClassData() const { return &_class_data_; }


void TeeVMMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeeVMMessage*>(&to_msg);
  auto& from = static_cast<const TeeVMMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.TeeVMMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tx_id().empty()) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  if (from._internal_has_cross_context()) {
    _this->_internal_mutable_cross_context()->::teevm::CrossContext::MergeFrom(
        from._internal_cross_context());
  }
  if (from._internal_has_sys_call_message()) {
    _this->_internal_mutable_sys_call_message()->::teevm::SysCallMessage::MergeFrom(
        from._internal_sys_call_message());
  }
  if (from._internal_has_request()) {
    _this->_internal_mutable_request()->::teevm::TxRequest::MergeFrom(
        from._internal_request());
  }
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::teevm::TxResponse::MergeFrom(
        from._internal_response());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeeVMMessage::CopyFrom(const TeeVMMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.TeeVMMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeeVMMessage::IsInitialized() const {
  return true;
}

void TeeVMMessage::InternalSwap(TeeVMMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_id_, lhs_arena,
      &other->_impl_.tx_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chain_id_, lhs_arena,
      &other->_impl_.chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeeVMMessage, _impl_.type_)
      + sizeof(TeeVMMessage::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(TeeVMMessage, _impl_.cross_context_)>(
          reinterpret_cast<char*>(&_impl_.cross_context_),
          reinterpret_cast<char*>(&other->_impl_.cross_context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeeVMMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[0]);
}

// ===================================================================

SysCallMessage_PayloadEntry_DoNotUse::SysCallMessage_PayloadEntry_DoNotUse() {}
SysCallMessage_PayloadEntry_DoNotUse::SysCallMessage_PayloadEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void SysCallMessage_PayloadEntry_DoNotUse::MergeFrom(const SysCallMessage_PayloadEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata SysCallMessage_PayloadEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[1]);
}

// ===================================================================

class SysCallMessage::_Internal {
 public:
};

SysCallMessage::SysCallMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &SysCallMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:teevm.SysCallMessage)
}
SysCallMessage::SysCallMessage(const SysCallMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SysCallMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.payload_)*/{}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.payload_.MergeFrom(from._impl_.payload_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.code_ = from._impl_.code_;
  // @@protoc_insertion_point(copy_constructor:teevm.SysCallMessage)
}

inline void SysCallMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.payload_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SysCallMessage::~SysCallMessage() {
  // @@protoc_insertion_point(destructor:teevm.SysCallMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void SysCallMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.payload_.Destruct();
  _impl_.payload_.~MapField();
  _impl_.message_.Destroy();
}

void SysCallMessage::ArenaDtor(void* object) {
  SysCallMessage* _this = reinterpret_cast< SysCallMessage* >(object);
  _this->_impl_.payload_.Destruct();
}
void SysCallMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SysCallMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.SysCallMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.payload_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SysCallMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .teevm.TeeVMCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::teevm::TeeVMCode>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.SysCallMessage.message"));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.payload_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SysCallMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.SysCallMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .teevm.TeeVMCode code = 1;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.SysCallMessage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // map<string, bytes> payload = 3;
  if (!this->_internal_payload().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = SysCallMessage_PayloadEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_payload();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.SysCallMessage.PayloadEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.SysCallMessage)
  return target;
}

size_t SysCallMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.SysCallMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> payload = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_payload_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_payload().begin();
      it != this->_internal_payload().end(); ++it) {
    total_size += SysCallMessage_PayloadEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .teevm.TeeVMCode code = 1;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SysCallMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SysCallMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SysCallMessage::GetClassData() const { return &_class_data_; }


void SysCallMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SysCallMessage*>(&to_msg);
  auto& from = static_cast<const SysCallMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.SysCallMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.payload_.MergeFrom(from._impl_.payload_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SysCallMessage::CopyFrom(const SysCallMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.SysCallMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysCallMessage::IsInitialized() const {
  return true;
}

void SysCallMessage::InternalSwap(SysCallMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.payload_.InternalSwap(&other->_impl_.payload_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.code_, other->_impl_.code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SysCallMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[2]);
}

// ===================================================================

class CrossContext::_Internal {
 public:
};

CrossContext::CrossContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:teevm.CrossContext)
}
CrossContext::CrossContext(const CrossContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CrossContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.process_name_){}
    , decltype(_impl_.cross_info_){}
    , decltype(_impl_.current_depth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_process_name().empty()) {
    _this->_impl_.process_name_.Set(from._internal_process_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cross_info_, &from._impl_.cross_info_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_depth_) -
    reinterpret_cast<char*>(&_impl_.cross_info_)) + sizeof(_impl_.current_depth_));
  // @@protoc_insertion_point(copy_constructor:teevm.CrossContext)
}

inline void CrossContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.process_name_){}
    , decltype(_impl_.cross_info_){uint64_t{0u}}
    , decltype(_impl_.current_depth_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.process_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.process_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CrossContext::~CrossContext() {
  // @@protoc_insertion_point(destructor:teevm.CrossContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.process_name_.Destroy();
}

void CrossContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrossContext::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.CrossContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.process_name_.ClearToEmpty();
  ::memset(&_impl_.cross_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_depth_) -
      reinterpret_cast<char*>(&_impl_.cross_info_)) + sizeof(_impl_.current_depth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 current_depth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.current_depth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string process_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_process_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.CrossContext.process_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 cross_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cross_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.CrossContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current_depth = 1;
  if (this->_internal_current_depth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current_depth(), target);
  }

  // string process_name = 2;
  if (!this->_internal_process_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_process_name().data(), static_cast<int>(this->_internal_process_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.CrossContext.process_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_process_name(), target);
  }

  // uint64 cross_info = 3;
  if (this->_internal_cross_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_cross_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.CrossContext)
  return target;
}

size_t CrossContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.CrossContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string process_name = 2;
  if (!this->_internal_process_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_process_name());
  }

  // uint64 cross_info = 3;
  if (this->_internal_cross_info() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_cross_info());
  }

  // uint32 current_depth = 1;
  if (this->_internal_current_depth() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_depth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CrossContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossContext::GetClassData() const { return &_class_data_; }


void CrossContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CrossContext*>(&to_msg);
  auto& from = static_cast<const CrossContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.CrossContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_process_name().empty()) {
    _this->_internal_set_process_name(from._internal_process_name());
  }
  if (from._internal_cross_info() != 0) {
    _this->_internal_set_cross_info(from._internal_cross_info());
  }
  if (from._internal_current_depth() != 0) {
    _this->_internal_set_current_depth(from._internal_current_depth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossContext::CopyFrom(const CrossContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.CrossContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossContext::IsInitialized() const {
  return true;
}

void CrossContext::InternalSwap(CrossContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.process_name_, lhs_arena,
      &other->_impl_.process_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CrossContext, _impl_.current_depth_)
      + sizeof(CrossContext::_impl_.current_depth_)
      - PROTOBUF_FIELD_OFFSET(CrossContext, _impl_.cross_info_)>(
          reinterpret_cast<char*>(&_impl_.cross_info_),
          reinterpret_cast<char*>(&other->_impl_.cross_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[3]);
}

// ===================================================================

TxRequest_ParametersEntry_DoNotUse::TxRequest_ParametersEntry_DoNotUse() {}
TxRequest_ParametersEntry_DoNotUse::TxRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TxRequest_ParametersEntry_DoNotUse::MergeFrom(const TxRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TxRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[4]);
}

// ===================================================================

class TxRequest::_Internal {
 public:
  static const ::teevm::TxContext& tx_context(const TxRequest* msg);
};

const ::teevm::TxContext&
TxRequest::_Internal::tx_context(const TxRequest* msg) {
  return *msg->_impl_.tx_context_;
}
TxRequest::TxRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TxRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:teevm.TxRequest)
}
TxRequest::TxRequest(const TxRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parameters_)*/{}
    , decltype(_impl_.contract_name_){}
    , decltype(_impl_.contract_version_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.tx_context_){nullptr}
    , decltype(_impl_.gas_used_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_name().empty()) {
    _this->_impl_.contract_name_.Set(from._internal_contract_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contract_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_version().empty()) {
    _this->_impl_.contract_version_.Set(from._internal_contract_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_method().empty()) {
    _this->_impl_.method_.Set(from._internal_method(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tx_context()) {
    _this->_impl_.tx_context_ = new ::teevm::TxContext(*from._impl_.tx_context_);
  }
  _this->_impl_.gas_used_ = from._impl_.gas_used_;
  // @@protoc_insertion_point(copy_constructor:teevm.TxRequest)
}

inline void TxRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.parameters_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.contract_name_){}
    , decltype(_impl_.contract_version_){}
    , decltype(_impl_.method_){}
    , decltype(_impl_.tx_context_){nullptr}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.method_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.method_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxRequest::~TxRequest() {
  // @@protoc_insertion_point(destructor:teevm.TxRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TxRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.parameters_.Destruct();
  _impl_.parameters_.~MapField();
  _impl_.contract_name_.Destroy();
  _impl_.contract_version_.Destroy();
  _impl_.method_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tx_context_;
}

void TxRequest::ArenaDtor(void* object) {
  TxRequest* _this = reinterpret_cast< TxRequest* >(object);
  _this->_impl_.parameters_.Destruct();
}
void TxRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.TxRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.parameters_.Clear();
  _impl_.contract_name_.ClearToEmpty();
  _impl_.contract_version_.ClearToEmpty();
  _impl_.method_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tx_context_ != nullptr) {
    delete _impl_.tx_context_;
  }
  _impl_.tx_context_ = nullptr;
  _impl_.gas_used_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxRequest.contract_name"));
        } else
          goto handle_unusual;
        continue;
      // string contract_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contract_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxRequest.contract_version"));
        } else
          goto handle_unusual;
        continue;
      // string method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxRequest.method"));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .teevm.TxContext tx_context = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tx_context(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.TxRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_name = 1;
  if (!this->_internal_contract_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_name().data(), static_cast<int>(this->_internal_contract_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxRequest.contract_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_name(), target);
  }

  // string contract_version = 2;
  if (!this->_internal_contract_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_version().data(), static_cast<int>(this->_internal_contract_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxRequest.contract_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_version(), target);
  }

  // string method = 3;
  if (!this->_internal_method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxRequest.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // map<string, bytes> parameters = 4;
  if (!this->_internal_parameters().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TxRequest_ParametersEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_parameters();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.TxRequest.ParametersEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .teevm.TxContext tx_context = 5;
  if (this->_internal_has_tx_context()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tx_context(this),
        _Internal::tx_context(this).GetCachedSize(), target, stream);
  }

  // uint64 gas_used = 6;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_gas_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.TxRequest)
  return target;
}

size_t TxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.TxRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> parameters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += TxRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string contract_name = 1;
  if (!this->_internal_contract_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_name());
  }

  // string contract_version = 2;
  if (!this->_internal_contract_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_version());
  }

  // string method = 3;
  if (!this->_internal_method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // .teevm.TxContext tx_context = 5;
  if (this->_internal_has_tx_context()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tx_context_);
  }

  // uint64 gas_used = 6;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxRequest::GetClassData() const { return &_class_data_; }


void TxRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxRequest*>(&to_msg);
  auto& from = static_cast<const TxRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.TxRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.parameters_.MergeFrom(from._impl_.parameters_);
  if (!from._internal_contract_name().empty()) {
    _this->_internal_set_contract_name(from._internal_contract_name());
  }
  if (!from._internal_contract_version().empty()) {
    _this->_internal_set_contract_version(from._internal_contract_version());
  }
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (from._internal_has_tx_context()) {
    _this->_internal_mutable_tx_context()->::teevm::TxContext::MergeFrom(
        from._internal_tx_context());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxRequest::CopyFrom(const TxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.TxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxRequest::IsInitialized() const {
  return true;
}

void TxRequest::InternalSwap(TxRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.parameters_.InternalSwap(&other->_impl_.parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contract_name_, lhs_arena,
      &other->_impl_.contract_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contract_version_, lhs_arena,
      &other->_impl_.contract_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.method_, lhs_arena,
      &other->_impl_.method_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxRequest, _impl_.gas_used_)
      + sizeof(TxRequest::_impl_.gas_used_)
      - PROTOBUF_FIELD_OFFSET(TxRequest, _impl_.tx_context_)>(
          reinterpret_cast<char*>(&_impl_.tx_context_),
          reinterpret_cast<char*>(&other->_impl_.tx_context_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[5]);
}

// ===================================================================

TxContext_WriteMapEntry_DoNotUse::TxContext_WriteMapEntry_DoNotUse() {}
TxContext_WriteMapEntry_DoNotUse::TxContext_WriteMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TxContext_WriteMapEntry_DoNotUse::MergeFrom(const TxContext_WriteMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TxContext_WriteMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[6]);
}

// ===================================================================

TxContext_ReadMapEntry_DoNotUse::TxContext_ReadMapEntry_DoNotUse() {}
TxContext_ReadMapEntry_DoNotUse::TxContext_ReadMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TxContext_ReadMapEntry_DoNotUse::MergeFrom(const TxContext_ReadMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TxContext_ReadMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[7]);
}

// ===================================================================

class TxContext::_Internal {
 public:
};

TxContext::TxContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TxContext::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:teevm.TxContext)
}
TxContext::TxContext(const TxContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.write_map_)*/{}
    , /*decltype(_impl_.read_map_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.write_map_.MergeFrom(from._impl_.write_map_);
  _this->_impl_.read_map_.MergeFrom(from._impl_.read_map_);
  // @@protoc_insertion_point(copy_constructor:teevm.TxContext)
}

inline void TxContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.write_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.read_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TxContext::~TxContext() {
  // @@protoc_insertion_point(destructor:teevm.TxContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TxContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.write_map_.Destruct();
  _impl_.write_map_.~MapField();
  _impl_.read_map_.Destruct();
  _impl_.read_map_.~MapField();
}

void TxContext::ArenaDtor(void* object) {
  TxContext* _this = reinterpret_cast< TxContext* >(object);
  _this->_impl_.write_map_.Destruct();
  _this->_impl_.read_map_.Destruct();
}
void TxContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxContext::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.TxContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.write_map_.Clear();
  _impl_.read_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, bytes> write_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.write_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> read_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.read_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.TxContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, bytes> write_map = 1;
  if (!this->_internal_write_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TxContext_WriteMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_write_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.TxContext.WriteMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, bytes> read_map = 2;
  if (!this->_internal_read_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TxContext_ReadMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_read_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.TxContext.ReadMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.TxContext)
  return target;
}

size_t TxContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.TxContext)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> write_map = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_write_map().begin();
      it != this->_internal_write_map().end(); ++it) {
    total_size += TxContext_WriteMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> read_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_read_map().begin();
      it != this->_internal_read_map().end(); ++it) {
    total_size += TxContext_ReadMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxContext::GetClassData() const { return &_class_data_; }


void TxContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxContext*>(&to_msg);
  auto& from = static_cast<const TxContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.TxContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.write_map_.MergeFrom(from._impl_.write_map_);
  _this->_impl_.read_map_.MergeFrom(from._impl_.read_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxContext::CopyFrom(const TxContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.TxContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxContext::IsInitialized() const {
  return true;
}

void TxContext::InternalSwap(TxContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.write_map_.InternalSwap(&other->_impl_.write_map_);
  _impl_.read_map_.InternalSwap(&other->_impl_.read_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TxContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[8]);
}

// ===================================================================

TxResponse_WriteMapEntry_DoNotUse::TxResponse_WriteMapEntry_DoNotUse() {}
TxResponse_WriteMapEntry_DoNotUse::TxResponse_WriteMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TxResponse_WriteMapEntry_DoNotUse::MergeFrom(const TxResponse_WriteMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TxResponse_WriteMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[9]);
}

// ===================================================================

TxResponse_ReadMapEntry_DoNotUse::TxResponse_ReadMapEntry_DoNotUse() {}
TxResponse_ReadMapEntry_DoNotUse::TxResponse_ReadMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TxResponse_ReadMapEntry_DoNotUse::MergeFrom(const TxResponse_ReadMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TxResponse_ReadMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[10]);
}

// ===================================================================

class TxResponse::_Internal {
 public:
};

TxResponse::TxResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &TxResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:teevm.TxResponse)
}
TxResponse::TxResponse(const TxResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TxResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.write_map_)*/{}
    , /*decltype(_impl_.read_map_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.contract_name_){}
    , decltype(_impl_.contract_version_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.gas_used_){}
    , decltype(_impl_.code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.write_map_.MergeFrom(from._impl_.write_map_);
  _this->_impl_.read_map_.MergeFrom(from._impl_.read_map_);
  _impl_.tx_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tx_id().empty()) {
    _this->_impl_.tx_id_.Set(from._internal_tx_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_result().empty()) {
    _this->_impl_.result_.Set(from._internal_result(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_name().empty()) {
    _this->_impl_.contract_name_.Set(from._internal_contract_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contract_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_version().empty()) {
    _this->_impl_.contract_version_.Set(from._internal_contract_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chain_id().empty()) {
    _this->_impl_.chain_id_.Set(from._internal_chain_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.gas_used_, &from._impl_.gas_used_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.code_) -
    reinterpret_cast<char*>(&_impl_.gas_used_)) + sizeof(_impl_.code_));
  // @@protoc_insertion_point(copy_constructor:teevm.TxResponse)
}

inline void TxResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.write_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.read_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.tx_id_){}
    , decltype(_impl_.result_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.contract_name_){}
    , decltype(_impl_.contract_version_){}
    , decltype(_impl_.chain_id_){}
    , decltype(_impl_.gas_used_){uint64_t{0u}}
    , decltype(_impl_.code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tx_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tx_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.result_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.result_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chain_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chain_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TxResponse::~TxResponse() {
  // @@protoc_insertion_point(destructor:teevm.TxResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void TxResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.write_map_.Destruct();
  _impl_.write_map_.~MapField();
  _impl_.read_map_.Destruct();
  _impl_.read_map_.~MapField();
  _impl_.events_.~RepeatedPtrField();
  _impl_.tx_id_.Destroy();
  _impl_.result_.Destroy();
  _impl_.message_.Destroy();
  _impl_.contract_name_.Destroy();
  _impl_.contract_version_.Destroy();
  _impl_.chain_id_.Destroy();
}

void TxResponse::ArenaDtor(void* object) {
  TxResponse* _this = reinterpret_cast< TxResponse* >(object);
  _this->_impl_.write_map_.Destruct();
  _this->_impl_.read_map_.Destruct();
}
void TxResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TxResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.TxResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.write_map_.Clear();
  _impl_.read_map_.Clear();
  _impl_.events_.Clear();
  _impl_.tx_id_.ClearToEmpty();
  _impl_.result_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.contract_name_.ClearToEmpty();
  _impl_.contract_version_.ClearToEmpty();
  _impl_.chain_id_.ClearToEmpty();
  ::memset(&_impl_.gas_used_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.code_) -
      reinterpret_cast<char*>(&_impl_.gas_used_)) + sizeof(_impl_.code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TxResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tx_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tx_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxResponse.tx_id"));
        } else
          goto handle_unusual;
        continue;
      // .teevm.TeeVMCode code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::teevm::TeeVMCode>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_result();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> write_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.write_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> read_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.read_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .teevm.TeeContractEvent events = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string contract_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_contract_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxResponse.contract_name"));
        } else
          goto handle_unusual;
        continue;
      // string contract_version = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_contract_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxResponse.contract_version"));
        } else
          goto handle_unusual;
        continue;
      // string chain_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_chain_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TxResponse.chain_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 gas_used = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.gas_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TxResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.TxResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tx_id = 1;
  if (!this->_internal_tx_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tx_id().data(), static_cast<int>(this->_internal_tx_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxResponse.tx_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tx_id(), target);
  }

  // .teevm.TeeVMCode code = 2;
  if (this->_internal_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_code(), target);
  }

  // bytes result = 3;
  if (!this->_internal_result().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_result(), target);
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxResponse.message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_message(), target);
  }

  // map<string, bytes> write_map = 5;
  if (!this->_internal_write_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TxResponse_WriteMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_write_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.TxResponse.WriteMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, bytes> read_map = 6;
  if (!this->_internal_read_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = TxResponse_ReadMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_read_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.TxResponse.ReadMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .teevm.TeeContractEvent events = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string contract_name = 8;
  if (!this->_internal_contract_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_name().data(), static_cast<int>(this->_internal_contract_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxResponse.contract_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_contract_name(), target);
  }

  // string contract_version = 9;
  if (!this->_internal_contract_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_version().data(), static_cast<int>(this->_internal_contract_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxResponse.contract_version");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_contract_version(), target);
  }

  // string chain_id = 10;
  if (!this->_internal_chain_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chain_id().data(), static_cast<int>(this->_internal_chain_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TxResponse.chain_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_chain_id(), target);
  }

  // uint64 gas_used = 11;
  if (this->_internal_gas_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(11, this->_internal_gas_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.TxResponse)
  return target;
}

size_t TxResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.TxResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> write_map = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_write_map().begin();
      it != this->_internal_write_map().end(); ++it) {
    total_size += TxResponse_WriteMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> read_map = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_read_map().begin();
      it != this->_internal_read_map().end(); ++it) {
    total_size += TxResponse_ReadMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .teevm.TeeContractEvent events = 7;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string tx_id = 1;
  if (!this->_internal_tx_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tx_id());
  }

  // bytes result = 3;
  if (!this->_internal_result().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  // string message = 4;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string contract_name = 8;
  if (!this->_internal_contract_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_name());
  }

  // string contract_version = 9;
  if (!this->_internal_contract_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_version());
  }

  // string chain_id = 10;
  if (!this->_internal_chain_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chain_id());
  }

  // uint64 gas_used = 11;
  if (this->_internal_gas_used() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_gas_used());
  }

  // .teevm.TeeVMCode code = 2;
  if (this->_internal_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TxResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TxResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TxResponse::GetClassData() const { return &_class_data_; }


void TxResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TxResponse*>(&to_msg);
  auto& from = static_cast<const TxResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.TxResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.write_map_.MergeFrom(from._impl_.write_map_);
  _this->_impl_.read_map_.MergeFrom(from._impl_.read_map_);
  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_tx_id().empty()) {
    _this->_internal_set_tx_id(from._internal_tx_id());
  }
  if (!from._internal_result().empty()) {
    _this->_internal_set_result(from._internal_result());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_contract_name().empty()) {
    _this->_internal_set_contract_name(from._internal_contract_name());
  }
  if (!from._internal_contract_version().empty()) {
    _this->_internal_set_contract_version(from._internal_contract_version());
  }
  if (!from._internal_chain_id().empty()) {
    _this->_internal_set_chain_id(from._internal_chain_id());
  }
  if (from._internal_gas_used() != 0) {
    _this->_internal_set_gas_used(from._internal_gas_used());
  }
  if (from._internal_code() != 0) {
    _this->_internal_set_code(from._internal_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TxResponse::CopyFrom(const TxResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.TxResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxResponse::IsInitialized() const {
  return true;
}

void TxResponse::InternalSwap(TxResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.write_map_.InternalSwap(&other->_impl_.write_map_);
  _impl_.read_map_.InternalSwap(&other->_impl_.read_map_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tx_id_, lhs_arena,
      &other->_impl_.tx_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.result_, lhs_arena,
      &other->_impl_.result_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contract_name_, lhs_arena,
      &other->_impl_.contract_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contract_version_, lhs_arena,
      &other->_impl_.contract_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chain_id_, lhs_arena,
      &other->_impl_.chain_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TxResponse, _impl_.code_)
      + sizeof(TxResponse::_impl_.code_)
      - PROTOBUF_FIELD_OFFSET(TxResponse, _impl_.gas_used_)>(
          reinterpret_cast<char*>(&_impl_.gas_used_),
          reinterpret_cast<char*>(&other->_impl_.gas_used_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TxResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[11]);
}

// ===================================================================

class TeeContractEvent::_Internal {
 public:
};

TeeContractEvent::TeeContractEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:teevm.TeeContractEvent)
}
TeeContractEvent::TeeContractEvent(const TeeContractEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TeeContractEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){from._impl_.data_}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.contract_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic().empty()) {
    _this->_impl_.topic_.Set(from._internal_topic(), 
      _this->GetArenaForAllocation());
  }
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_name().empty()) {
    _this->_impl_.contract_name_.Set(from._internal_contract_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:teevm.TeeContractEvent)
}

inline void TeeContractEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){arena}
    , decltype(_impl_.topic_){}
    , decltype(_impl_.contract_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeeContractEvent::~TeeContractEvent() {
  // @@protoc_insertion_point(destructor:teevm.TeeContractEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeeContractEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.~RepeatedPtrField();
  _impl_.topic_.Destroy();
  _impl_.contract_name_.Destroy();
}

void TeeContractEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TeeContractEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.TeeContractEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _impl_.topic_.ClearToEmpty();
  _impl_.contract_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeeContractEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TeeContractEvent.topic"));
        } else
          goto handle_unusual;
        continue;
      // string contract_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contract_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.TeeContractEvent.contract_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_data();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "teevm.TeeContractEvent.data"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeeContractEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.TeeContractEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TeeContractEvent.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // string contract_name = 2;
  if (!this->_internal_contract_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_name().data(), static_cast<int>(this->_internal_contract_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TeeContractEvent.contract_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_contract_name(), target);
  }

  // repeated string data = 3;
  for (int i = 0, n = this->_internal_data_size(); i < n; i++) {
    const auto& s = this->_internal_data(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.TeeContractEvent.data");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.TeeContractEvent)
  return target;
}

size_t TeeContractEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.TeeContractEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string data = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.data_.size());
  for (int i = 0, n = _impl_.data_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.data_.Get(i));
  }

  // string topic = 1;
  if (!this->_internal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string contract_name = 2;
  if (!this->_internal_contract_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeeContractEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TeeContractEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeeContractEvent::GetClassData() const { return &_class_data_; }


void TeeContractEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TeeContractEvent*>(&to_msg);
  auto& from = static_cast<const TeeContractEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.TeeContractEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.data_.MergeFrom(from._impl_.data_);
  if (!from._internal_topic().empty()) {
    _this->_internal_set_topic(from._internal_topic());
  }
  if (!from._internal_contract_name().empty()) {
    _this->_internal_set_contract_name(from._internal_contract_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeeContractEvent::CopyFrom(const TeeContractEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.TeeContractEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeeContractEvent::IsInitialized() const {
  return true;
}

void TeeContractEvent::InternalSwap(TeeContractEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.topic_, lhs_arena,
      &other->_impl_.topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contract_name_, lhs_arena,
      &other->_impl_.contract_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TeeContractEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[12]);
}

// ===================================================================

CallContractRequest_ArgsEntry_DoNotUse::CallContractRequest_ArgsEntry_DoNotUse() {}
CallContractRequest_ArgsEntry_DoNotUse::CallContractRequest_ArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CallContractRequest_ArgsEntry_DoNotUse::MergeFrom(const CallContractRequest_ArgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CallContractRequest_ArgsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[13]);
}

// ===================================================================

class CallContractRequest::_Internal {
 public:
};

CallContractRequest::CallContractRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CallContractRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:teevm.CallContractRequest)
}
CallContractRequest::CallContractRequest(const CallContractRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CallContractRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.args_)*/{}
    , decltype(_impl_.contract_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_name().empty()) {
    _this->_impl_.contract_name_.Set(from._internal_contract_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:teevm.CallContractRequest)
}

inline void CallContractRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.args_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.contract_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.contract_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.contract_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallContractRequest::~CallContractRequest() {
  // @@protoc_insertion_point(destructor:teevm.CallContractRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CallContractRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.Destruct();
  _impl_.args_.~MapField();
  _impl_.contract_name_.Destroy();
}

void CallContractRequest::ArenaDtor(void* object) {
  CallContractRequest* _this = reinterpret_cast< CallContractRequest* >(object);
  _this->_impl_.args_.Destruct();
}
void CallContractRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallContractRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.CallContractRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  _impl_.contract_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CallContractRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string contract_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_contract_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.CallContractRequest.contract_name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.args_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CallContractRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.CallContractRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string contract_name = 1;
  if (!this->_internal_contract_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_contract_name().data(), static_cast<int>(this->_internal_contract_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.CallContractRequest.contract_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_contract_name(), target);
  }

  // map<string, bytes> args = 2;
  if (!this->_internal_args().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = CallContractRequest_ArgsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_args();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.CallContractRequest.ArgsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.CallContractRequest)
  return target;
}

size_t CallContractRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.CallContractRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> args = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_args_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_args().begin();
      it != this->_internal_args().end(); ++it) {
    total_size += CallContractRequest_ArgsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string contract_name = 1;
  if (!this->_internal_contract_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_contract_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CallContractRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CallContractRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CallContractRequest::GetClassData() const { return &_class_data_; }


void CallContractRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CallContractRequest*>(&to_msg);
  auto& from = static_cast<const CallContractRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.CallContractRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (!from._internal_contract_name().empty()) {
    _this->_internal_set_contract_name(from._internal_contract_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CallContractRequest::CopyFrom(const CallContractRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.CallContractRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallContractRequest::IsInitialized() const {
  return true;
}

void CallContractRequest::InternalSwap(CallContractRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.contract_name_, lhs_arena,
      &other->_impl_.contract_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CallContractRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[14]);
}

// ===================================================================

class Response::_Internal {
 public:
};

Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:teevm.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    _this->_impl_.payload_.Set(from._internal_payload(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:teevm.Response)
}

inline void Response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.payload_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.payload_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:teevm.Response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.payload_.Destroy();
}

void Response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.Response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.payload_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "teevm.Response.message"));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.Response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "teevm.Response.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.Response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Response::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Response::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Response::GetClassData() const { return &_class_data_; }


void Response::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Response*>(&to_msg);
  auto& from = static_cast<const Response&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.Response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_payload().empty()) {
    _this->_internal_set_payload(from._internal_payload());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.payload_, lhs_arena,
      &other->_impl_.payload_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[15]);
}

// ===================================================================

ContractResponse_WriteMapEntry_DoNotUse::ContractResponse_WriteMapEntry_DoNotUse() {}
ContractResponse_WriteMapEntry_DoNotUse::ContractResponse_WriteMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContractResponse_WriteMapEntry_DoNotUse::MergeFrom(const ContractResponse_WriteMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContractResponse_WriteMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[16]);
}

// ===================================================================

ContractResponse_ReadMapEntry_DoNotUse::ContractResponse_ReadMapEntry_DoNotUse() {}
ContractResponse_ReadMapEntry_DoNotUse::ContractResponse_ReadMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ContractResponse_ReadMapEntry_DoNotUse::MergeFrom(const ContractResponse_ReadMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ContractResponse_ReadMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[17]);
}

// ===================================================================

class ContractResponse::_Internal {
 public:
  static const ::teevm::Response& response(const ContractResponse* msg);
};

const ::teevm::Response&
ContractResponse::_Internal::response(const ContractResponse* msg) {
  return *msg->_impl_.response_;
}
ContractResponse::ContractResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ContractResponse::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:teevm.ContractResponse)
}
ContractResponse::ContractResponse(const ContractResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ContractResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.write_map_)*/{}
    , /*decltype(_impl_.read_map_)*/{}
    , decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.write_map_.MergeFrom(from._impl_.write_map_);
  _this->_impl_.read_map_.MergeFrom(from._impl_.read_map_);
  if (from._internal_has_response()) {
    _this->_impl_.response_ = new ::teevm::Response(*from._impl_.response_);
  }
  // @@protoc_insertion_point(copy_constructor:teevm.ContractResponse)
}

inline void ContractResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.write_map_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.read_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.events_){arena}
    , decltype(_impl_.response_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ContractResponse::~ContractResponse() {
  // @@protoc_insertion_point(destructor:teevm.ContractResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ContractResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.write_map_.Destruct();
  _impl_.write_map_.~MapField();
  _impl_.read_map_.Destruct();
  _impl_.read_map_.~MapField();
  _impl_.events_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.response_;
}

void ContractResponse::ArenaDtor(void* object) {
  ContractResponse* _this = reinterpret_cast< ContractResponse* >(object);
  _this->_impl_.write_map_.Destruct();
  _this->_impl_.read_map_.Destruct();
}
void ContractResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContractResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:teevm.ContractResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.write_map_.Clear();
  _impl_.read_map_.Clear();
  _impl_.events_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContractResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .teevm.Response response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> write_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.write_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, bytes> read_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.read_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .teevm.TeeContractEvent events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ContractResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:teevm.ContractResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .teevm.Response response = 1;
  if (this->_internal_has_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::response(this),
        _Internal::response(this).GetCachedSize(), target, stream);
  }

  // map<string, bytes> write_map = 2;
  if (!this->_internal_write_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ContractResponse_WriteMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_write_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.ContractResponse.WriteMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, bytes> read_map = 3;
  if (!this->_internal_read_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ContractResponse_ReadMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_read_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "teevm.ContractResponse.ReadMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(3, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .teevm.TeeContractEvent events = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:teevm.ContractResponse)
  return target;
}

size_t ContractResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:teevm.ContractResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, bytes> write_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_write_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_write_map().begin();
      it != this->_internal_write_map().end(); ++it) {
    total_size += ContractResponse_WriteMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, bytes> read_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_read_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_read_map().begin();
      it != this->_internal_read_map().end(); ++it) {
    total_size += ContractResponse_ReadMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .teevm.TeeContractEvent events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .teevm.Response response = 1;
  if (this->_internal_has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.response_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContractResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ContractResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContractResponse::GetClassData() const { return &_class_data_; }


void ContractResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ContractResponse*>(&to_msg);
  auto& from = static_cast<const ContractResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:teevm.ContractResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.write_map_.MergeFrom(from._impl_.write_map_);
  _this->_impl_.read_map_.MergeFrom(from._impl_.read_map_);
  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (from._internal_has_response()) {
    _this->_internal_mutable_response()->::teevm::Response::MergeFrom(
        from._internal_response());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContractResponse::CopyFrom(const ContractResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:teevm.ContractResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractResponse::IsInitialized() const {
  return true;
}

void ContractResponse::InternalSwap(ContractResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.write_map_.InternalSwap(&other->_impl_.write_map_);
  _impl_.read_map_.InternalSwap(&other->_impl_.read_map_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  swap(_impl_.response_, other->_impl_.response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_teevm_5fmessage_2eproto_getter, &descriptor_table_teevm_5fmessage_2eproto_once,
      file_level_metadata_teevm_5fmessage_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace teevm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::teevm::TeeVMMessage*
Arena::CreateMaybeMessage< ::teevm::TeeVMMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TeeVMMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::SysCallMessage_PayloadEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::SysCallMessage_PayloadEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::SysCallMessage_PayloadEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::SysCallMessage*
Arena::CreateMaybeMessage< ::teevm::SysCallMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::SysCallMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::CrossContext*
Arena::CreateMaybeMessage< ::teevm::CrossContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::CrossContext >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxRequest_ParametersEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::TxRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxRequest*
Arena::CreateMaybeMessage< ::teevm::TxRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxContext_WriteMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::TxContext_WriteMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxContext_WriteMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxContext_ReadMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::TxContext_ReadMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxContext_ReadMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxContext*
Arena::CreateMaybeMessage< ::teevm::TxContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxContext >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxResponse_WriteMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::TxResponse_WriteMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxResponse_WriteMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxResponse_ReadMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::TxResponse_ReadMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxResponse_ReadMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TxResponse*
Arena::CreateMaybeMessage< ::teevm::TxResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TxResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::TeeContractEvent*
Arena::CreateMaybeMessage< ::teevm::TeeContractEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::TeeContractEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::CallContractRequest_ArgsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::CallContractRequest_ArgsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::CallContractRequest_ArgsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::CallContractRequest*
Arena::CreateMaybeMessage< ::teevm::CallContractRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::CallContractRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::Response*
Arena::CreateMaybeMessage< ::teevm::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::ContractResponse_WriteMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::ContractResponse_WriteMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::ContractResponse_WriteMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::ContractResponse_ReadMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::teevm::ContractResponse_ReadMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::ContractResponse_ReadMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::teevm::ContractResponse*
Arena::CreateMaybeMessage< ::teevm::ContractResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::teevm::ContractResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
